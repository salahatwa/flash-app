// /**
//  * GenHub
//  * GenHub api
//  *
//  * OpenAPI spec version: 1.0
//  * 
//  *
//  * NOTE: This class is auto generated by the swagger code generator program.
//  * https://github.com/swagger-api/swagger-codegen.git
//  * Do not edit the class manually.
//  */
// /* tslint:disable:no-unused-variable member-ordering */

// import { Inject, Injectable, Optional }                      from '@angular/core';
// import { HttpClient, HttpHeaders, HttpParams,
//          HttpResponse, HttpEvent }                           from '@angular/common/http';
// import { CustomHttpUrlEncodingCodec }                        from '../encoder';

// import { Observable }                                        from 'rxjs/Observable';

// import { UploadResult } from '../model/uploadResult';

// import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
// import { Configuration }                                     from '../configuration';


// @Injectable()
// export class UploadControllerService {

//     protected basePath = 'https://localhost:8080/socialty/api/v1';
//     public defaultHeaders = new HttpHeaders();
//     public configuration = new Configuration();

//     constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
//         if (basePath) {
//             this.basePath = basePath;
//         }
//         if (configuration) {
//             this.configuration = configuration;
//             this.basePath = basePath || configuration.basePath || this.basePath;
//         }
//     }

//     /**
//      * @param consumes string[] mime-types
//      * @return true: consumes contains 'multipart/form-data', false: otherwise
//      */
//     private canConsumeForm(consumes: string[]): boolean {
//         const form = 'multipart/form-data';
//         for (const consume of consumes) {
//             if (form === consume) {
//                 return true;
//             }
//         }
//         return false;
//     }


//     /**
//      * upload
//      * 
//      * @param crop crop
//      * @param file file
//      * @param height height
//      * @param size size
//      * @param width width
//      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
//      * @param reportProgress flag to report request and response progress.
//      */
//     public uploadUsingPOST(crop?: string, file?: Blob, height?: number, size?: number, width?: number, observe?: 'body', reportProgress?: boolean): Observable<UploadResult>;
//     public uploadUsingPOST(crop?: string, file?: Blob, height?: number, size?: number, width?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UploadResult>>;
//     public uploadUsingPOST(crop?: string, file?: Blob, height?: number, size?: number, width?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UploadResult>>;
//     public uploadUsingPOST(crop?: string, file?: Blob, height?: number, size?: number, width?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






//         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
//         if (crop !== undefined && crop !== null) {
//             queryParameters = queryParameters.set('crop', <any>crop);
//         }
//         if (height !== undefined && height !== null) {
//             queryParameters = queryParameters.set('height', <any>height);
//         }
//         if (size !== undefined && size !== null) {
//             queryParameters = queryParameters.set('size', <any>size);
//         }
//         if (width !== undefined && width !== null) {
//             queryParameters = queryParameters.set('width', <any>width);
//         }

//         let headers = this.defaultHeaders;

//         // authentication (JWT) required
//         if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
//             headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
//         }

//         // to determine the Accept header
//         let httpHeaderAccepts: string[] = [
//             '*/*'
//         ];
//         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
//         if (httpHeaderAcceptSelected != undefined) {
//             headers = headers.set('Accept', httpHeaderAcceptSelected);
//         }

//         // to determine the Content-Type header
//         const consumes: string[] = [
//             'multipart/form-data'
//         ];

//         const canConsumeForm = this.canConsumeForm(consumes);

//         let formParams: { append(param: string, value: any): void | HttpParams; };
//         let useForm = false;
//         let convertFormParamsToString = false;
//         // use FormData to transmit files using content-type "multipart/form-data"
//         // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
//         useForm = canConsumeForm;
//         if (useForm) {
//             formParams = new FormData();
//         } else {
//             formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
//         }

//         if (file !== undefined) {
//             formParams = formParams.append('file', <any>file) || formParams;
//         }

//         return this.httpClient.post<UploadResult>(`${this.basePath}/user/post/upload`,
//             convertFormParamsToString ? formParams.toString() : formParams,
//             {
//                 params: queryParameters,
//                 withCredentials: this.configuration.withCredentials,
//                 headers: headers,
//                 observe: observe,
//                 reportProgress: reportProgress
//             }
//         );
//     }

// }
